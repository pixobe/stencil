/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { DropdownOption } from "./components/dropdown-menu/dropdown-utils";
export { DropdownOption } from "./components/dropdown-menu/dropdown-utils";
export namespace Components {
    interface DropdownMenu {
        "options"?: DropdownOption[];
        "tooltip"?: string;
        "value": any;
    }
    interface PixobeBanner {
        "name": string;
    }
    interface PixobeIcon {
        "icon": string;
    }
    interface PixobeWatermark {
    }
}
export interface DropdownMenuCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDropdownMenuElement;
}
declare global {
    interface HTMLDropdownMenuElementEventMap {
        "valueChanged": string;
    }
    interface HTMLDropdownMenuElement extends Components.DropdownMenu, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDropdownMenuElementEventMap>(type: K, listener: (this: HTMLDropdownMenuElement, ev: DropdownMenuCustomEvent<HTMLDropdownMenuElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDropdownMenuElementEventMap>(type: K, listener: (this: HTMLDropdownMenuElement, ev: DropdownMenuCustomEvent<HTMLDropdownMenuElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDropdownMenuElement: {
        prototype: HTMLDropdownMenuElement;
        new (): HTMLDropdownMenuElement;
    };
    interface HTMLPixobeBannerElement extends Components.PixobeBanner, HTMLStencilElement {
    }
    var HTMLPixobeBannerElement: {
        prototype: HTMLPixobeBannerElement;
        new (): HTMLPixobeBannerElement;
    };
    interface HTMLPixobeIconElement extends Components.PixobeIcon, HTMLStencilElement {
    }
    var HTMLPixobeIconElement: {
        prototype: HTMLPixobeIconElement;
        new (): HTMLPixobeIconElement;
    };
    interface HTMLPixobeWatermarkElement extends Components.PixobeWatermark, HTMLStencilElement {
    }
    var HTMLPixobeWatermarkElement: {
        prototype: HTMLPixobeWatermarkElement;
        new (): HTMLPixobeWatermarkElement;
    };
    interface HTMLElementTagNameMap {
        "dropdown-menu": HTMLDropdownMenuElement;
        "pixobe-banner": HTMLPixobeBannerElement;
        "pixobe-icon": HTMLPixobeIconElement;
        "pixobe-watermark": HTMLPixobeWatermarkElement;
    }
}
declare namespace LocalJSX {
    interface DropdownMenu {
        "onValueChanged"?: (event: DropdownMenuCustomEvent<string>) => void;
        "options"?: DropdownOption[];
        "tooltip"?: string;
        "value"?: any;
    }
    interface PixobeBanner {
        "name"?: string;
    }
    interface PixobeIcon {
        "icon"?: string;
    }
    interface PixobeWatermark {
    }
    interface IntrinsicElements {
        "dropdown-menu": DropdownMenu;
        "pixobe-banner": PixobeBanner;
        "pixobe-icon": PixobeIcon;
        "pixobe-watermark": PixobeWatermark;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "dropdown-menu": LocalJSX.DropdownMenu & JSXBase.HTMLAttributes<HTMLDropdownMenuElement>;
            "pixobe-banner": LocalJSX.PixobeBanner & JSXBase.HTMLAttributes<HTMLPixobeBannerElement>;
            "pixobe-icon": LocalJSX.PixobeIcon & JSXBase.HTMLAttributes<HTMLPixobeIconElement>;
            "pixobe-watermark": LocalJSX.PixobeWatermark & JSXBase.HTMLAttributes<HTMLPixobeWatermarkElement>;
        }
    }
}
