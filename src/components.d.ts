/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { DropdownOption } from "./components/dropdown-menu/dropdown-utils";
export { DropdownOption } from "./components/dropdown-menu/dropdown-utils";
export namespace Components {
    interface DropdownMenu {
        "options"?: DropdownOption[];
        "tooltip"?: string;
        "value": any;
    }
    interface IconEnvelope {
    }
    interface IconFacebook {
    }
    interface IconMove {
    }
    interface IconPixobe {
    }
    interface IconThickness {
    }
    interface IconYoutube {
    }
    interface PixobeBanner {
        "name": string;
    }
}
export interface DropdownMenuCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDropdownMenuElement;
}
declare global {
    interface HTMLDropdownMenuElementEventMap {
        "valueChanged": string;
    }
    interface HTMLDropdownMenuElement extends Components.DropdownMenu, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDropdownMenuElementEventMap>(type: K, listener: (this: HTMLDropdownMenuElement, ev: DropdownMenuCustomEvent<HTMLDropdownMenuElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDropdownMenuElementEventMap>(type: K, listener: (this: HTMLDropdownMenuElement, ev: DropdownMenuCustomEvent<HTMLDropdownMenuElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDropdownMenuElement: {
        prototype: HTMLDropdownMenuElement;
        new (): HTMLDropdownMenuElement;
    };
    interface HTMLIconEnvelopeElement extends Components.IconEnvelope, HTMLStencilElement {
    }
    var HTMLIconEnvelopeElement: {
        prototype: HTMLIconEnvelopeElement;
        new (): HTMLIconEnvelopeElement;
    };
    interface HTMLIconFacebookElement extends Components.IconFacebook, HTMLStencilElement {
    }
    var HTMLIconFacebookElement: {
        prototype: HTMLIconFacebookElement;
        new (): HTMLIconFacebookElement;
    };
    interface HTMLIconMoveElement extends Components.IconMove, HTMLStencilElement {
    }
    var HTMLIconMoveElement: {
        prototype: HTMLIconMoveElement;
        new (): HTMLIconMoveElement;
    };
    interface HTMLIconPixobeElement extends Components.IconPixobe, HTMLStencilElement {
    }
    var HTMLIconPixobeElement: {
        prototype: HTMLIconPixobeElement;
        new (): HTMLIconPixobeElement;
    };
    interface HTMLIconThicknessElement extends Components.IconThickness, HTMLStencilElement {
    }
    var HTMLIconThicknessElement: {
        prototype: HTMLIconThicknessElement;
        new (): HTMLIconThicknessElement;
    };
    interface HTMLIconYoutubeElement extends Components.IconYoutube, HTMLStencilElement {
    }
    var HTMLIconYoutubeElement: {
        prototype: HTMLIconYoutubeElement;
        new (): HTMLIconYoutubeElement;
    };
    interface HTMLPixobeBannerElement extends Components.PixobeBanner, HTMLStencilElement {
    }
    var HTMLPixobeBannerElement: {
        prototype: HTMLPixobeBannerElement;
        new (): HTMLPixobeBannerElement;
    };
    interface HTMLElementTagNameMap {
        "dropdown-menu": HTMLDropdownMenuElement;
        "icon-envelope": HTMLIconEnvelopeElement;
        "icon-facebook": HTMLIconFacebookElement;
        "icon-move": HTMLIconMoveElement;
        "icon-pixobe": HTMLIconPixobeElement;
        "icon-thickness": HTMLIconThicknessElement;
        "icon-youtube": HTMLIconYoutubeElement;
        "pixobe-banner": HTMLPixobeBannerElement;
    }
}
declare namespace LocalJSX {
    interface DropdownMenu {
        "onValueChanged"?: (event: DropdownMenuCustomEvent<string>) => void;
        "options"?: DropdownOption[];
        "tooltip"?: string;
        "value"?: any;
    }
    interface IconEnvelope {
    }
    interface IconFacebook {
    }
    interface IconMove {
    }
    interface IconPixobe {
    }
    interface IconThickness {
    }
    interface IconYoutube {
    }
    interface PixobeBanner {
        "name"?: string;
    }
    interface IntrinsicElements {
        "dropdown-menu": DropdownMenu;
        "icon-envelope": IconEnvelope;
        "icon-facebook": IconFacebook;
        "icon-move": IconMove;
        "icon-pixobe": IconPixobe;
        "icon-thickness": IconThickness;
        "icon-youtube": IconYoutube;
        "pixobe-banner": PixobeBanner;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "dropdown-menu": LocalJSX.DropdownMenu & JSXBase.HTMLAttributes<HTMLDropdownMenuElement>;
            "icon-envelope": LocalJSX.IconEnvelope & JSXBase.HTMLAttributes<HTMLIconEnvelopeElement>;
            "icon-facebook": LocalJSX.IconFacebook & JSXBase.HTMLAttributes<HTMLIconFacebookElement>;
            "icon-move": LocalJSX.IconMove & JSXBase.HTMLAttributes<HTMLIconMoveElement>;
            "icon-pixobe": LocalJSX.IconPixobe & JSXBase.HTMLAttributes<HTMLIconPixobeElement>;
            "icon-thickness": LocalJSX.IconThickness & JSXBase.HTMLAttributes<HTMLIconThicknessElement>;
            "icon-youtube": LocalJSX.IconYoutube & JSXBase.HTMLAttributes<HTMLIconYoutubeElement>;
            "pixobe-banner": LocalJSX.PixobeBanner & JSXBase.HTMLAttributes<HTMLPixobeBannerElement>;
        }
    }
}
